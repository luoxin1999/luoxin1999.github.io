<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟成牛传</title>
  
  <subtitle>lx的技术博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-26T11:31:05.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>lx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QEMU PCI 设备学习笔记</title>
    <link href="http://example.com/2024/06/26/QEMU-PCI-%E8%AE%BE%E5%A4%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/06/26/QEMU-PCI-%E8%AE%BE%E5%A4%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-06-26T11:31:05.000Z</published>
    <updated>2024-06-26T11:31:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xio3130-upstream-设备初始化过程"><a href="#xio3130-upstream-设备初始化过程" class="headerlink" title="xio3130_upstream 设备初始化过程"></a>xio3130_upstream 设备初始化过程</h1><p>函数调用链： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type_init(xio3130_upstream_register_types) -&gt; type_register_static(&amp;xio3130_upstream_info); -&gt; xio3130_upstream_class_init(ObjectClass *klass, <span class="type">void</span> *data)</span><br></pre></td></tr></table></figure><span id="more"></span><p>pci 设备主要有两个成员变量–DeviceClass、PCIDeviceClass</p><p>初始化这个两个成员变量的过程如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">xio3130_upstream_class_init</span><span class="params">(ObjectClass *klass, <span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    DeviceClass *dc = DEVICE_CLASS(klass);</span><br><span class="line">    PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);</span><br><span class="line"></span><br><span class="line">    k-&gt;is_bridge = <span class="literal">true</span>;</span><br><span class="line">    k-&gt;config_write = xio3130_upstream_write_config;</span><br><span class="line">    k-&gt;realize = xio3130_upstream_realize;</span><br><span class="line">    k-&gt;<span class="built_in">exit</span> = xio3130_upstream_exitfn;</span><br><span class="line">    k-&gt;vendor_id = PCI_VENDOR_ID_TI;</span><br><span class="line">    k-&gt;device_id = PCI_DEVICE_ID_TI_XIO3130U;</span><br><span class="line">    k-&gt;revision = XIO3130_REVISION;</span><br><span class="line">    set_bit(DEVICE_CATEGORY_BRIDGE, dc-&gt;categories);</span><br><span class="line">    dc-&gt;desc = <span class="string">&quot;TI X3130 Upstream Port of PCI Express Switch&quot;</span>;</span><br><span class="line">    dc-&gt;reset = xio3130_upstream_reset;</span><br><span class="line">    dc-&gt;vmsd = &amp;vmstate_xio3130_upstream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xio3130_upstream 有一个父类————PCIEPort，从</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> TypeInfo xio3130_upstream_info = &#123;</span><br><span class="line">    .name          = <span class="string">&quot;x3130-upstream&quot;</span>,</span><br><span class="line">    .parent        = TYPE_PCIE_PORT,</span><br></pre></td></tr></table></figure><p>就可以看出来。同理可以看出来 PCIEPort的父类是PCIBridge，PCIBridge的父类是抽象类PCIDevice。</p><h1 id="PCI-设备寄存器初始化过程"><a href="#PCI-设备寄存器初始化过程" class="headerlink" title="PCI 设备寄存器初始化过程"></a>PCI 设备寄存器初始化过程</h1><h1 id="pci-bridge-写配置"><a href="#pci-bridge-写配置" class="headerlink" title="pci bridge 写配置"></a>pci bridge 写配置</h1><p>pci_bridge_write_config 调用了 pci.c 里面的 pci_default_write_config实现设备网桥设备的读写。pci_default_write_config函数内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pci_default_write_config</span><span class="params">(PCIDevice *d, <span class="type">uint32_t</span> addr, <span class="type">uint32_t</span> val_in, <span class="type">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, was_irq_disabled = <span class="built_in">pci_irq_disabled</span>(d);</span><br><span class="line">    <span class="type">uint32_t</span> val = val_in;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l; val &gt;&gt;= <span class="number">8</span>, ++i) &#123;</span><br><span class="line">        <span class="type">uint8_t</span> wmask = d-&gt;wmask[addr + i];</span><br><span class="line">        <span class="type">uint8_t</span> w1cmask = d-&gt;w1cmask[addr + i];</span><br><span class="line">        <span class="built_in">assert</span>(!(wmask &amp; w1cmask));</span><br><span class="line">        d-&gt;config[addr + i] = (d-&gt;config[addr + i] &amp; ~wmask) | (val &amp; wmask);</span><br><span class="line">        d-&gt;config[addr + i] &amp;= ~(val &amp; w1cmask); <span class="comment">/* W1C: Write 1 to Clear */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ranges_overlap</span>(addr, l, PCI_BASE_ADDRESS_0, <span class="number">24</span>) ||</span><br><span class="line">        <span class="built_in">ranges_overlap</span>(addr, l, PCI_ROM_ADDRESS, <span class="number">4</span>) ||</span><br><span class="line">        <span class="built_in">ranges_overlap</span>(addr, l, PCI_ROM_ADDRESS1, <span class="number">4</span>) ||</span><br><span class="line">        <span class="built_in">range_covers_byte</span>(addr, l, PCI_COMMAND))</span><br><span class="line">        <span class="built_in">pci_update_mappings</span>(d);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">range_covers_byte</span>(addr, l, PCI_COMMAND)) &#123;</span><br><span class="line">        <span class="built_in">pci_update_irq_disabled</span>(d, was_irq_disabled);</span><br><span class="line">        <span class="built_in">memory_region_set_enabled</span>(&amp;d-&gt;bus_master_enable_region,</span><br><span class="line">                                  <span class="built_in">pci_get_word</span>(d-&gt;config + PCI_COMMAND)</span><br><span class="line">                                    &amp; PCI_COMMAND_MASTER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">msi_write_config</span>(d, addr, val_in, l);</span><br><span class="line">    <span class="built_in">msix_write_config</span>(d, addr, val_in, l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>d-&gt;config是pci设备配置空间，为了方便，这里贴出地址空间的图片可以对应上。</p><p><img src="/2024/06/26/QEMU-PCI-%E8%AE%BE%E5%A4%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pci%20config%20space.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;xio3130-upstream-设备初始化过程&quot;&gt;&lt;a href=&quot;#xio3130-upstream-设备初始化过程&quot; class=&quot;headerlink&quot; title=&quot;xio3130_upstream 设备初始化过程&quot;&gt;&lt;/a&gt;xio3130_upstream 设备初始化过程&lt;/h1&gt;&lt;p&gt;函数调用链： &lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type_init(xio3130_upstream_register_types) -&amp;gt; type_register_static(&amp;amp;xio3130_upstream_info); -&amp;gt; xio3130_upstream_class_init(ObjectClass *klass, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *data)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="QEMU" scheme="http://example.com/tags/QEMU/"/>
    
  </entry>
  
  <entry>
    <title>hexo + markdown 简明使用指令集</title>
    <link href="http://example.com/2024/06/23/hexo-markdown-%E7%AE%80%E6%98%8E%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <id>http://example.com/2024/06/23/hexo-markdown-%E7%AE%80%E6%98%8E%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4%E9%9B%86/</id>
    <published>2024-06-23T23:59:04.000Z</published>
    <updated>2024-06-25T06:03:15.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在hexo的文件夹下执行</span></span><br><span class="line">hexo new post &quot;文章名称&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行之后会在./source/_posts下面生成一个 文章名称.md 的文件，这个就是markdown文章</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="删除旧的静态网页"><a href="#删除旧的静态网页" class="headerlink" title="删除旧的静态网页"></a>删除旧的静态网页</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">想要构建新的网页就要把旧的删掉</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在hexo的文件夹下执行</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p><img src="/2024/06/23/hexo-markdown-%E7%AE%80%E6%98%8E%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4%E9%9B%86/Snipaste_2024-06-24_22-44-05.png"></p><h2 id="构建新的静态网页"><a href="#构建新的静态网页" class="headerlink" title="构建新的静态网页"></a>构建新的静态网页</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在hexo的文件夹下执行</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><img src="/2024/06/23/hexo-markdown-%E7%AE%80%E6%98%8E%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4%E9%9B%86/Snipaste_2024-06-24_22-46-25.png"></p><p>可以看到生成了很多网页的资源，生成的静态网页放在.&#x2F;public文件夹下</p><p><img src="/2024/06/23/hexo-markdown-%E7%AE%80%E6%98%8E%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4%E9%9B%86/Snipaste_2024-06-24_22-48-14.png"></p><h2 id="上传新的静态网页"><a href="#上传新的静态网页" class="headerlink" title="上传新的静态网页"></a>上传新的静态网页</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在hexo的文件夹下执行</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;创建新的文章&quot;&gt;&lt;a href=&quot;#创建新的文章&quot; class=&quot;headerlink&quot; title=&quot;创建新的文章&quot;&gt;&lt;/a&gt;创建新的文章&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;在hexo的文件夹下执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo new post &amp;quot;文章名称&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;执行之后会在./source/_posts下面生成一个 文章名称.md 的文件，这个就是markdown文章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>VMware 虚拟机只有一个环回网口解决办法</title>
    <link href="http://example.com/2024/06/23/note/"/>
    <id>http://example.com/2024/06/23/note/</id>
    <published>2024-06-23T23:11:04.000Z</published>
    <updated>2024-06-28T01:06:58.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VMware-虚拟机只有一个环回网口解决办法"><a href="#VMware-虚拟机只有一个环回网口解决办法" class="headerlink" title="VMware 虚拟机只有一个环回网口解决办法"></a>VMware 虚拟机只有一个环回网口解决办法</h1><p>这两天每次启动VM和vscode的时候总会发现vscode连接不上vm，排查之后（ifconfig）发现vm里面只有一个环回网口（127.0.0.1）。</p><p><img src="/2024/06/23/note/no_ens33.png"></p><p>后来了解到是没有启动ens33网口。这个网口是以太网的网口，为啥没有启动呢？不理解，先解决再说。</p><p>先启动ens33</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig ens33 up</span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="/2024/06/23/note/ens33_up.png"></p><p>调用DHCP获取IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dhclient</span><br></pre></td></tr></table></figure><p><img src="/2024/06/23/note/dhclient.png"></p><p>这样就成了。</p><p>之后尝试解决开机不能自动获取ip的问题 以及 设置为静态ip。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;VMware-虚拟机只有一个环回网口解决办法&quot;&gt;&lt;a href=&quot;#VMware-虚拟机只有一个环回网口解决办法&quot; class=&quot;headerlink&quot; title=&quot;VMware 虚拟机只有一个环回网口解决办法&quot;&gt;&lt;/a&gt;VMware 虚拟机只有一个环回网口解决办法&lt;/h1&gt;&lt;p&gt;这两天每次启动VM和vscode的时候总会发现vscode连接不上vm，排查之后（ifconfig）发现vm里面只有一个环回网口（127.0.0.1）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/06/23/note/no_ens33.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;后来了解到是没有启动ens33网口。这个网口是以太网的网口，为啥没有启动呢？不理解，先解决再说。&lt;/p&gt;
&lt;p&gt;先启动ens33&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo ifconfig ens33 up&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Internet" scheme="http://example.com/tags/Internet/"/>
    
  </entry>
  
</feed>
